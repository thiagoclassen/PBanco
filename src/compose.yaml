services:
  
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ApiGateway/ApiGateway/Dockerfile
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Container
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - client.api
      - proposal.api
      - creditcard.api
      - read.api
  
  # RabbitMQ
  pbanco.queue:
    image: rabbitmq:management-alpine
    volumes:
      - ./rabbitmqdata:/var/lib/rabbitmq
      - ./rabbitmqlogs:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  # Read API Service
  read.api:
    image: read.api
    build:
      context: .
      dockerfile: Services/ReadService/ReadService.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Container
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      pbanco.queue:
        condition: service_healthy
  
  # Read Database
  read.db:
    image: mongo:7.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: ReadServiceDb
    ports:
      - "27017:27017"
    command: [ "mongod", "--bind_ip_all" ]
    healthcheck:
      test: [ "CMD", "mongo", "--username", "root", "--password", "pass", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
  
  # Client API Service
  client.api:
    image: client.api
    build:
      context: .
      dockerfile: Services/Clients/Clients.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Container
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      pbanco.queue:
        condition: service_healthy
  
  # Client Database
  client.db:
    image: mcr.microsoft.com/mssql/server:2025-latest
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=yourStrong(!)Password
    ports:
      - '1433:1433'
  
  # Proposal API
  proposal.api:
    image: proposal.api
    build:
      context: .
      dockerfile: Services/Proposal/Proposal.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Container
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      pbanco.queue:
        condition: service_healthy
  
  
  # Proposal Database
  proposal.db:
    image: mcr.microsoft.com/mssql/server:2025-latest
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=yourStrong(!)Password
      - MSSQL_TCP_PORT=1436
    ports:
      - '1436:1436'
  
  # Credit Card API
  creditcard.api:
    image: creditcard.api
    build:
      context: .
      dockerfile: Services/CreditCard/CreditCard.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Container
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      pbanco.queue:
        condition: service_healthy
  
  
  # Credit Card Database
  creditcard.db:
    image: mcr.microsoft.com/mssql/server:2025-latest
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=yourStrong(!)Password
      - MSSQL_TCP_PORT=1435
    ports:
      - '1435:1435'
  


